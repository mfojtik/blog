<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mfojtik blog</title>
    <link>http://mfojtik.io/</link>
    <description>Recent content on mfojtik blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 26 Jan 2018 14:44:48 +0100</lastBuildDate>
    
	<atom:link href="http://mfojtik.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Use DigitalOcean Spaces as Docker Registry storage</title>
      <link>http://mfojtik.io/post/digitalocean-spaces-registry/</link>
      <pubDate>Fri, 26 Jan 2018 14:44:48 +0100</pubDate>
      
      <guid>http://mfojtik.io/post/digitalocean-spaces-registry/</guid>
      <description>DigitalOcean recently introduced Spaces which is their name for an Object Storage service similar to Amazon S3.
Since I run OpenShift on DigitalOcean, I was curios if instead of pushing my images into Amazon S3 I can just use &amp;ldquo;in-house&amp;rdquo; service that should give me better performance.
To make Spaces work for Docker Registry in OpenShift (or in Kubernetes) you need to first create your &amp;ldquo;bucket&amp;rdquo; (aka &amp;ldquo;Space Name&amp;rdquo;).
In DigitalOcean admin interface, click &amp;ldquo;Create&amp;rdquo; and then navigate to bottom of the list and hist &amp;ldquo;Spaces&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Use xhyve for development on OSX</title>
      <link>http://mfojtik.io/post/xhyve-for-development/</link>
      <pubDate>Wed, 03 Aug 2016 14:44:55 +0100</pubDate>
      
      <guid>http://mfojtik.io/post/xhyve-for-development/</guid>
      <description>If you are working on Mac and use Docker, you might noticed that Docker now runs natively on OSX using xhyve. The xhyve is a port of bhyve to OS X. It is built on top of Hypervisor.framework and available from OS X version 10.10.
If you are developing code that runs on Linux, your options on OSX are basically limited to Virtualbox, Parallels or VMWare. Not anymore! You can use xhyve to run your Linux VMs now and it is pretty easy.</description>
    </item>
    
    <item>
      <title>Building secure Docker images</title>
      <link>http://mfojtik.io/post/secure-docker-images/</link>
      <pubDate>Thu, 07 Apr 2016 14:44:55 +0100</pubDate>
      
      <guid>http://mfojtik.io/post/secure-docker-images/</guid>
      <description>A lot was written about Docker security and how to run Docker in a secure way. But there are not many articles describing how to write Docker images, which are secure and easy to maitain. According to this article over 30% of the official Docker images published to Docker Hub contain some security vuleabilities.
Here is my list of rules to follow when I&amp;rsquo;m building Docker images:
 Do not run as &amp;ldquo;root&amp;rdquo; - almost every image published on Docker hub does not set the USER instruction, which means they expect to be run as the root user.</description>
    </item>
    
    <item>
      <title>Simple file hosting on OpenShift</title>
      <link>http://mfojtik.io/post/file-sharing-on-openshift/</link>
      <pubDate>Fri, 11 Mar 2016 14:44:55 +0100</pubDate>
      
      <guid>http://mfojtik.io/post/file-sharing-on-openshift/</guid>
      <description>I often need to upload something really fast to make it available for somebody. That includes PDF files with my presentations, error logs, pictures or random meme pictures I can then link to.
In 99% of cases all I want is to simply scp the file into my DigitalOcean instance and run some small web server serving the directory where I uploading the file to public.
To make this possible on OpenShift v3 that I run, following was needed:</description>
    </item>
    
    <item>
      <title>How to run Hugo on OpenShift v3</title>
      <link>http://mfojtik.io/post/running-hugo-in-openshift/</link>
      <pubDate>Thu, 18 Feb 2016 14:44:55 +0100</pubDate>
      
      <guid>http://mfojtik.io/post/running-hugo-in-openshift/</guid>
      <description>In my previous post I described how I transitioned myself into the container era by installing the OpenShift v3 in DigitalOcean and containerizing my applications. This post will describe how I moved from my previous blog engine to Hugo engine.
My previous blog engine was a hand-written Sinatra application that was just serving Markdown files. Everything else was just Javascript. While that seems pretty decent and minimal, in fact it is not.</description>
    </item>
    
    <item>
      <title>Running OpenShift v3 on DigitalOcean</title>
      <link>http://mfojtik.io/post/openshift-v3-digitalocean/</link>
      <pubDate>Fri, 12 Feb 2016 14:44:55 +0100</pubDate>
      
      <guid>http://mfojtik.io/post/openshift-v3-digitalocean/</guid>
      <description>I&amp;rsquo;m running this blog (and couple other blogs and side-projects) on DigitalOcean since 2014. Till this week, my VM looked like a typical VM from 90&amp;rsquo;: mysql server, nginx+php, irssi. Nothing special about that setup really. But, since I&amp;rsquo;m currently busy working on the OpenShift v3 platform, I convinced myself to upgrade to the &amp;ldquo;containers era&amp;rdquo;.
This blog post describes the steps I&amp;rsquo;ve take to run the latest OpenShift v3 platform and next post will explain how I containerized the apps I ran (this site included).</description>
    </item>
    
    <item>
      <title>Michal Fojtik Bio</title>
      <link>http://mfojtik.io/bio/</link>
      <pubDate>Thu, 11 Feb 2016 14:44:48 +0100</pubDate>
      
      <guid>http://mfojtik.io/bio/</guid>
      <description>Michal is a Principal Software Engineer at Red Hat. For the past six years, he&amp;rsquo;s been actively contributing to various open-source projects. Currently, Michal works full-time on the OpenShift project, a PaaS based on Google Kubernetes, where he is a member of the developer experience team. His involvement with OpenShift includes designing continuous integration solutions based on OpenShift and Kubernetes and co-maintaining the OpenShift image building subsystem.
 Github Profile LinkedIn Profile Fedora Project  </description>
    </item>
    
    <item>
      <title>Publishing reveal.js presentations using OpenShift</title>
      <link>http://mfojtik.io/post/reveal-js/</link>
      <pubDate>Wed, 11 Feb 2015 14:44:55 +0100</pubDate>
      
      <guid>http://mfojtik.io/post/reveal-js/</guid>
      <description>There are numerous reasons why I love creating my slides as a simple HTML page, for example, I don&amp;rsquo;t want to collect emails of people that ask me to send them those, or I&amp;rsquo;m not worried that the format of my slides will not be recognized or the presentation will look terrible on someone else&amp;rsquo;s machine. The other reason is that I simply hate all presentation software, including Apple Keynote, LibreOffice Presenter or the one from Microsoft.</description>
    </item>
    
    <item>
      <title>Publishing reveal.js presentations using OpenShift</title>
      <link>http://mfojtik.io/post/publishing-presentations-on-openshift/</link>
      <pubDate>Tue, 11 Feb 2014 14:44:55 +0100</pubDate>
      
      <guid>http://mfojtik.io/post/publishing-presentations-on-openshift/</guid>
      <description>There are numerous reasons why I love creating my slides as a simple HTML page, for example, I don&amp;rsquo;t want to collect emails of people that ask me to send them those, or I&amp;rsquo;m not worried that the format of my slides will not be recognized or the presentation will look terrible on someone else&amp;rsquo;s machine. The other reason is that I simply hate all presentation software, including Apple Keynote, LibreOffice Presenter or the one from Microsoft.</description>
    </item>
    
    <item>
      <title>OpenShift v2 in DigitalOcean</title>
      <link>http://mfojtik.io/post/openshift-on-digitalocean/</link>
      <pubDate>Tue, 29 Oct 2013 14:44:55 +0100</pubDate>
      
      <guid>http://mfojtik.io/post/openshift-on-digitalocean/</guid>
      <description>DigitalOcean is a new IaaS provider, similar to the Amazon EC2. Comparing to the AWS, DigitalOcean is still a small fish in the IaaS cloud market, but due to their offerring of SSD storage, they are attracting more and more users.
OpenShift is a PaaS service, developed by Red Hat. OpenShift Origin, compared to the Heroku is an OpenSource project, so you can install it on your own machine and then run your own PaaS.</description>
    </item>
    
    <item>
      <title>Ruby websockets on Openshift</title>
      <link>http://mfojtik.io/post/ruby-websockets-on-openshift/</link>
      <pubDate>Thu, 08 Aug 2013 14:44:55 +0100</pubDate>
      
      <guid>http://mfojtik.io/post/ruby-websockets-on-openshift/</guid>
      <description>Few months ago, Openshift announced support for websockets on their site, with nice examples how to use then using the Node.JS. Since using websockets in Node.JS is easy because the Node.JS web server supports them, the situlation in Ruby is a bit more complex.
The Ruby cartridge by default runs Apache with Passenger, which makes implementing websockets a bit tricky. Fortunately, Openshift permits us to replace the default web server with a different server that has support for this new cutting-edge technology.</description>
    </item>
    
    <item>
      <title>Sequel database migrations</title>
      <link>http://mfojtik.io/post/deltacloud-database-migrations-easy/</link>
      <pubDate>Tue, 19 Feb 2013 14:44:55 +0100</pubDate>
      
      <guid>http://mfojtik.io/post/deltacloud-database-migrations-easy/</guid>
      <description>As we added the database support to Deltacloud CIMI using Sequel ORM, the one problem we were thinking about were database migrations. What if someone started using Deltacloud CIMI and meanwhile we made some changes to the database schema?Â For example, what if we added, renamed or deleted a new column in table? In that case once we have pushed a new release out, this user would face to numerous errors coming out from the Deltacloud server.</description>
    </item>
    
    <item>
      <title>Resolve application DNS in OpenShift v2</title>
      <link>http://mfojtik.io/post/howto-make-dns-working-for-openshift-in-vagrant/</link>
      <pubDate>Mon, 11 Feb 2013 14:44:55 +0100</pubDate>
      
      <guid>http://mfojtik.io/post/howto-make-dns-working-for-openshift-in-vagrant/</guid>
      <description>If you followed this OpenShift howto and you installed OpenShift Origin using the Puppet modules in Vagrant, then maybe you come across with the problem how you can access your OpenShift applications outside the Vagrant virtual machine. By default OpenShift vagrant file will forward ports 80, 443, 22 and 53 to your host machine. This allows vagrant ssh to work and also allows you to access OpenShift Apache service using curl http://localhost:8080.</description>
    </item>
    
    <item>
      <title>How we started using Sequel in Deltacloud</title>
      <link>http://mfojtik.io/post/how-we-start-using-database-in-deltacloud/</link>
      <pubDate>Tue, 22 Jan 2013 14:44:55 +0100</pubDate>
      
      <guid>http://mfojtik.io/post/how-we-start-using-database-in-deltacloud/</guid>
      <description>Since I started working on Deltacloud API, we always used to say that Deltacloud is stateless and you don&amp;rsquo;t need to have any persistence store. Well, that is no longer true and we added the database as a dependency. But don&amp;rsquo;t panic, Deltacloud is still stateless and the database is here only to help our CIMI implementation be even more awesome.
The story begun when we came across the problem of how to map some CIMI entities and some properties to the backend providers.</description>
    </item>
    
    <item>
      <title>rbenv - a better alternative for rvm in Fedora</title>
      <link>http://mfojtik.io/post/rbenv-simple-ruby-managment-in-fedora/</link>
      <pubDate>Mon, 03 Sep 2012 14:44:55 +0100</pubDate>
      
      <guid>http://mfojtik.io/post/rbenv-simple-ruby-managment-in-fedora/</guid>
      <description>If you are Ruby developer, you may know that there is more than one Ruby platform. Sometimes it is important to easy switch between them, without messing up the operating system and installed gems.
So far, the most popular utility for managing multiple Ruby distributions is RVM. However this tool goes far beyond to just switching Ruby versions. It has bundled gem sets management, it patches Ruby to achieve better integration and many other ugly things.</description>
    </item>
    
    <item>
      <title>Ruby application boilerplate</title>
      <link>http://mfojtik.io/post/ruby-boilerplate-management/</link>
      <pubDate>Mon, 06 Aug 2012 14:44:55 +0100</pubDate>
      
      <guid>http://mfojtik.io/post/ruby-boilerplate-management/</guid>
      <description>You know it, you&amp;rsquo;ve got an idea but the process of getting all files in place is boring and slows you down. In the end, you find yourself dealing with CSS and DataMapper configuration rather than working on the &amp;lsquo;real&amp;rsquo; application logic, which I found very frustrating.
Boilerplater Because I don&amp;rsquo;t want to start all the time from the scratch, I created a small Ruby utility to help me bootstrap my new application development.</description>
    </item>
    
    <item>
      <title>Deltacloud with EC2 frontend? Why not.</title>
      <link>http://mfojtik.io/post/deltacloud-with-ec2-frontend/</link>
      <pubDate>Sat, 07 Jul 2012 14:44:55 +0100</pubDate>
      
      <guid>http://mfojtik.io/post/deltacloud-with-ec2-frontend/</guid>
      <description>We are doing the Deltacloud API project because we think that preventing from vendor API lock-in is very important to everyone who uses services provided by a public or private cloud vendor. But what if you are already locked in to one particular cloud API? And yes, I am speaking about the Amazon EC2 API which seems to by widely adopted. Since this API is soo popular, the other projects like OpenStack or Eucalyptus provide an EC2 API adaptor for those who are already locked by Amazon EC2.</description>
    </item>
    
    <item>
      <title>How to have nice Ruby exceptions</title>
      <link>http://mfojtik.io/post/nicer-ruby-exceptions/</link>
      <pubDate>Wed, 25 Apr 2012 14:44:55 +0100</pubDate>
      
      <guid>http://mfojtik.io/post/nicer-ruby-exceptions/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>Deltacloud is now modular and offers the drivers API</title>
      <link>http://mfojtik.io/post/deltacloud-as-library-and-more/</link>
      <pubDate>Sun, 22 Apr 2012 14:44:55 +0100</pubDate>
      
      <guid>http://mfojtik.io/post/deltacloud-as-library-and-more/</guid>
      <description>The Deltacloud API revamp is now done and pushed to our master GIT repo. The revamp itself does not affect the backward compatibility nor introduces any API schema changes. The main goal of this work is to make Deltacloud API a modular Sinatra application, thus pluggable to any other Rack-based web application (Rails, Padrino, Sinatra, etc..). As a side effect, since we do not use the Sinatra methods in a global namespace, this revamp also introduces the possibility to use Deltacloud API as a Ruby library.</description>
    </item>
    
    <item>
      <title>Deltacloud API using modular Sinatra way</title>
      <link>http://mfojtik.io/post/deltacloud-api-using-sinatra-modular-app/</link>
      <pubDate>Wed, 11 Apr 2012 14:44:55 +0100</pubDate>
      
      <guid>http://mfojtik.io/post/deltacloud-api-using-sinatra-modular-app/</guid>
      <description>When we started the Deltacloud API project three years ago, we thought the best way how to do it would be to use the Sinatra framework. This Ruby framework provides a simple DSL for writing small-size web applications. And since Deltacloud API does not use any database or complicated messaging system it is perfect use-case for Sinatra application.
However, after a while, we realized that using just plain Sinatra routes is not perfectly DRY, since we repeated too much code and actions.</description>
    </item>
    
    <item>
      <title>Avoiding anti-patterns in Ruby - Arrays</title>
      <link>http://mfojtik.io/post/avoiding-anti-patterns-in-ruby/</link>
      <pubDate>Wed, 21 Mar 2012 14:44:55 +0100</pubDate>
      
      <guid>http://mfojtik.io/post/avoiding-anti-patterns-in-ruby/</guid>
      <description>Since I came to Ruby from the Java and PHP world I&amp;rsquo;ve found many expressions used in Ruby cryptic and I&amp;rsquo;ve been trying to avoid them in my daily life. After years and thousand lines of Ruby code I&amp;rsquo;ve read, I feel a need to change the way I write the code. I want to make my code look better, readable and preferably save some keystrokes.
 In software engineering, an anti-pattern (or antipattern) is a pattern that may be commonly used but is ineffective and/or counterproductive in practice.</description>
    </item>
    
    <item>
      <title>Creating REST API&#39;s using Sinatra and Rabbit</title>
      <link>http://mfojtik.io/post/creating-rest-based-api-with-sinatra-rabbit/</link>
      <pubDate>Thu, 01 Mar 2012 14:44:55 +0100</pubDate>
      
      <guid>http://mfojtik.io/post/creating-rest-based-api-with-sinatra-rabbit/</guid>
      <description>When we started working on Deltacloud API rewrite to Sinatra, we realized that creating routes for every single Deltacloud collection can be pretty frustrating. Usually, when you writing REST based application in Sinatra you end-up with typing the same CRUD operations for every collection of resources your application have.
This was a bit frustrating, since many operations are similar and basically doing the same thing. For example the &amp;lsquo;show&amp;rsquo; operation is usually defined like this:</description>
    </item>
    
    <item>
      <title>Deltacloud presentation at FOSDEM 2012</title>
      <link>http://mfojtik.io/post/deltacloud-at-fosdem-2012/</link>
      <pubDate>Tue, 07 Feb 2012 14:44:55 +0100</pubDate>
      
      <guid>http://mfojtik.io/post/deltacloud-at-fosdem-2012/</guid>
      <description>Deltacloud API was presented at FOSDEM 2012 in Brussels. As I promised to some people on the conference, I published an online version of my talk. I was asked some interesting questions about extending the API to support more features like Amazon RDS or how OpenStack compete with Deltacloud API. Both are worth more discussion, so if anyone is interested in starting this thread in Deltacloud API mailing list, feel fres to do so.</description>
    </item>
    
    <item>
      <title>Howto deploy Deltacloud API in Red Hat OpenShift Paas</title>
      <link>http://mfojtik.io/post/howto-deploy-deltacloud-to-openshift/</link>
      <pubDate>Sun, 11 Dec 2011 14:44:55 +0100</pubDate>
      
      <guid>http://mfojtik.io/post/howto-deploy-deltacloud-to-openshift/</guid>
      <description>As you may already know, Red Hat announced it&amp;rsquo;s own opensource PaaS called OpenShift this year. As many other PaaS services, like Heroku you can deploy your Rack applications easely using GIT without configuring anything. Since the Deltacloud API project I&amp;rsquo;m working on is a Sinatra application, thus Rack compatible, it would be great to offer our potential users a way how to quickly deploy Deltacloud API inside OpenShift. There are several benefits of doing that, like you don&amp;rsquo;t need to mess your system with installing Ruby libraries (which could be pretty painfull process, especially in operating systems like Windows).</description>
    </item>
    
    <item>
      <title>Making a DSL in Ruby</title>
      <link>http://mfojtik.io/post/making-a-dsl-in-ruby/</link>
      <pubDate>Sun, 11 Dec 2011 14:44:55 +0100</pubDate>
      
      <guid>http://mfojtik.io/post/making-a-dsl-in-ruby/</guid>
      <description>The main goal of writing such thing as a DSL is ussualy helping yourself to not repeat the same code over and over (keeping code DRY). Tradeoff for this approach is ussualy a piece of unreadable and complex code with simple purpose: To handle this DSL and translate it to Ruby language. Lets take a quick example:
rule :apache do enable 80 enable 8080 enable 443 name &amp;lsquo;example.com&amp;rsquo; directory &amp;lsquo;/var/www/example.com&amp;rsquo; update 120 end</description>
    </item>
    
    <item>
      <title>Whats new in Deltacloud API v0.4.0</title>
      <link>http://mfojtik.io/post/whats-new-in-deltacloud-api-v0-4-0/</link>
      <pubDate>Fri, 16 Sep 2011 14:44:55 +0100</pubDate>
      
      <guid>http://mfojtik.io/post/whats-new-in-deltacloud-api-v0-4-0/</guid>
      <description>Yesterday we proudly announced the official release of Deltacloud API version 0.4.0. I would like to share with us the new features which are included in this release. I took several month to bump the release version so the list of new things is pretty log.
New command-line options The deamonized server is started on the background and it automatically logs to the system log. This option will be used widely in init scripts on Linux OS.</description>
    </item>
    
    <item>
      <title>How to create a new Deltacloud API driver</title>
      <link>http://mfojtik.io/post/how-to-create-a-new-deltacloud-api-driver/</link>
      <pubDate>Wed, 10 Aug 2011 14:44:55 +0100</pubDate>
      
      <guid>http://mfojtik.io/post/how-to-create-a-new-deltacloud-api-driver/</guid>
      <description>Even if we try hard in Deltacloud project to support as many different cloud providers as we can, we just can&amp;rsquo;t cover every cloud. Also, it might come that you&amp;rsquo;re building your own cloud based on some virtualization like libvirt or Xen and you have your custom tools to manage it but you want to offer a REST API for your service to make your customers happy. Then this small guide might be handy for you.</description>
    </item>
    
  </channel>
</rss>